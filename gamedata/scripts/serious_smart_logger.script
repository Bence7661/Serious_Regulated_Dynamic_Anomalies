local rdaCfg = regulated_dynamic_anomalies_config.Get

function LogSmartData(key)
    if key == DIK_keys.DIK_X and rdaCfg("smart_logger") then
        local smart_id = smart_terrain.nearest_to_actor_smart.id
        local smart = smart_id and SIMBOARD.smarts[smart_id]
        local msg = ""

        if not smart or not smart.smrt then
            msg = "[SERIOUS SMART LOGGER] Smart not found!"
            Log(msg)
            news_manager.send_tip(db.actor, msg, nil, "ui_icon_news_trx_communication", 6000)
        else
            msg = string.format("[SERIOUS SMART LOGGER] LevelName: %s, Smart name: %s", level.name(), smart.smrt:name())
            Log(msg)
            news_manager.send_tip(db.actor, msg, nil, "ui_icon_news_trx_communication", 6000)
        end
    end
end

function ForceUpdateDAOs(key)
    if key == DIK_keys.DIK_C and rdaCfg("devDebug") then
        drx_da_main.drx_da_update_dynamic_anomalies(true)
    end
end

function Log(msg, ...)
    if rdaCfg("devDebug") then FileLogger.log(msg, ...)
    else printf(msg, ...) end
end

function on_game_start()
    RegisterScriptCallback("on_key_press", ForceUpdateDAOs)
    RegisterScriptCallback("on_key_press", LogSmartData)
end